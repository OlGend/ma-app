{"ast":null,"code":"var _jsxFileName = \"/home/anderson/first-react-app/my-app/src/Tasks/Tasks.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport Modal from '../component/Modal/Modal';\nimport Button from '../component/Button/Button';\nimport Task from './Task/Task';\nimport './Tasks.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tasks = _ref => {\n  _s();\n  let {\n    onClick\n  } = _ref;\n  const [isModalOpened, setIsModalOpened] = useState(false);\n  const [tasks, setTasks] = useState([{\n    id: id,\n    title: inputValue\n  }]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const openModal = () => {\n    setIsModalOpened(true);\n  };\n  const closeModal = () => {\n    setIsModalOpened(false);\n  };\n  function handleInputChange(event) {\n    setInputValue(event.target.value);\n  }\n  ;\n  function handleSubmit(event) {\n    event.preventDefault();\n    setTasks([...tasks, {\n      id: tasks.length + 1,\n      value: inputValue\n    }]);\n    closeModal();\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tasks\",\n    children: [tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n      isModalOpened: isModalOpened,\n      openModal: openModal,\n      submittedValue: task.value\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: openModal,\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), isModalOpened && /*#__PURE__*/_jsxDEV(Modal, {\n      closeModal: closeModal,\n      handleSubmit: handleSubmit,\n      handleInputChange: handleInputChange,\n      inputValue: inputValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(Tasks, \"GmDQh4RjrbjmwRbxbZCQHSYS87g=\");\n_c = Tasks;\nexport default Tasks;\nvar _c;\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"names":["React","useState","Modal","Button","Task","jsxDEV","_jsxDEV","Tasks","_ref","_s","onClick","isModalOpened","setIsModalOpened","tasks","setTasks","id","title","inputValue","setInputValue","openModal","closeModal","handleInputChange","event","target","value","handleSubmit","preventDefault","length","className","children","map","task","submittedValue","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anderson/first-react-app/my-app/src/Tasks/Tasks.jsx"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nimport Modal from '../component/Modal/Modal';\nimport Button from '../component/Button/Button';\nimport Task from './Task/Task';\nimport './Tasks.scss'\n\nconst Tasks = ({onClick}) => {\n\n    const [isModalOpened, setIsModalOpened] = useState(false);\n    const [tasks, setTasks] = useState([\n        { id: id, title: inputValue}\n    ]);\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const openModal = () => {\n        setIsModalOpened(true);\n    };\n\n    const closeModal = () => {\n        setIsModalOpened(false);\n    };\n\n    function handleInputChange(event) {\n        setInputValue(event.target.value);\n    };\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        setTasks([...tasks, { id: tasks.length + 1, value: inputValue }]);\n        closeModal();\n    };\n\n    return (\n        <div className='tasks'>\n             {tasks.map((task) => (\n                <Task isModalOpened={isModalOpened} openModal={openModal} key={task.id} submittedValue={task.value} />\n            ))}\n            <Button onClick={openModal}>\n                Add Task\n            </Button>\n            {isModalOpened && (\n                <Modal\n                    closeModal={closeModal}\n                    handleSubmit={handleSubmit}\n                    handleInputChange={handleInputChange}\n                    inputValue={inputValue}\n                />\n            )}\n            \n        </div>\n    );\n};\n\n\nexport default Tasks;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAEhC,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAO,cAAc;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,KAAK,GAAGC,IAAA,IAAe;EAAAC,EAAA;EAAA,IAAd;IAACC;EAAO,CAAC,GAAAF,IAAA;EAEpB,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAC/B;IAAEc,EAAE,EAAEA,EAAE;IAAEC,KAAK,EAAEC;EAAU,CAAC,CAC/B,CAAC;EACF,MAAM,CAACA,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMkB,SAAS,GAAGA,CAAA,KAAM;IACpBP,gBAAgB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAMQ,UAAU,GAAGA,CAAA,KAAM;IACrBR,gBAAgB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,SAASS,iBAAiBA,CAACC,KAAK,EAAE;IAC9BJ,aAAa,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACrC;EAAC;EAED,SAASC,YAAYA,CAACH,KAAK,EAAE;IACzBA,KAAK,CAACI,cAAc,EAAE;IACtBZ,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE;MAAEE,EAAE,EAAEF,KAAK,CAACc,MAAM,GAAG,CAAC;MAAEH,KAAK,EAAEP;IAAW,CAAC,CAAC,CAAC;IACjEG,UAAU,EAAE;EAChB;EAAC;EAED,oBACId,OAAA;IAAKsB,SAAS,EAAC,OAAO;IAAAC,QAAA,GAChBhB,KAAK,CAACiB,GAAG,CAAEC,IAAI,iBACbzB,OAAA,CAACF,IAAI;MAACO,aAAa,EAAEA,aAAc;MAACQ,SAAS,EAAEA,SAAU;MAAea,cAAc,EAAED,IAAI,CAACP;IAAM,GAApCO,IAAI,CAAChB,EAAE;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACzE,CAAC,eACF9B,OAAA,CAACH,MAAM;MAACO,OAAO,EAAES,SAAU;MAAAU,QAAA,EAAC;IAE5B;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,EACRzB,aAAa,iBACVL,OAAA,CAACJ,KAAK;MACFkB,UAAU,EAAEA,UAAW;MACvBK,YAAY,EAAEA,YAAa;MAC3BJ,iBAAiB,EAAEA,iBAAkB;MACrCJ,UAAU,EAAEA;IAAW;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAE9B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEC;AAEd,CAAC;AAAC3B,EAAA,CA7CIF,KAAK;AAAA8B,EAAA,GAAL9B,KAAK;AAgDX,eAAeA,KAAK;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}